#!/usr/bin/env perl

use strict "vars";
use strict "refs";
use warnings;
use Time::HiRes qw(gettimeofday); 
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../perl/lib";

my $start_time = time; 

my $actual_transfer_time = 0;

#Default values for model
my $partition_overhead_coeff_a = 0.001;
my $partition_overhead_coeff_b = 0.1;
my $per_byte_annotate_time = 0.001;	
my $bandwidth_bytes_per_sec = 100*1000000; #100MBps

my $run_timing_code = 0;

my $sample_env = 0;
my $sample_tasks = 1;

my $resources = 20;
my $tasks = 0;
	
my $common_dependency_size = 0; 

my $total_tiers = 0;
my %task_failures; 

my $estimate_granularity = 1;

BEGIN{
   if (not ($ENV{CGL_SO_SOURCE})) {
      $ENV{CGL_SO_SOURCE} = "$FindBin::Bin/../lib/CGL/so.obo";
   }
   if (not ($ENV{CGL_GO_SOURCE})) {
      $ENV{CGL_GO_SOURCE} = "$FindBin::Bin/../lib/CGL/gene_ontology.obo"
   }
   
   #what to do on ^C
   $SIG{'INT'} = sub {
      print STDERR "\n\nMaker aborted by user!\n\n";
      exit (1);
   };    
   
   #supress warnings from storable module
   $SIG{'__WARN__'} = sub {
      warn $_[0] if ( $_[0] !~ /Not a CODE reference/ &&
		      $_[0] !~ /Can\'t store item / &&
		      $_[0] !~ /Find\:\:skip_pattern|File\/Find\.pm/
		    );
   };
}

use Cwd;
use Cwd qw(abs_path); 
use Getopt::Long qw(:config no_ignore_case);
use Iterator::Any;
use Error qw(:try);
use Error::Simple;
use Storable qw(nstore retrieve);
use work_queue;
use POSIX qw(ceil floor);
#external libraries below.
use Proc::Signal;
use GI;
use Fasta;
use ds_utility;
use GFFDB;
use Process::MpiChunk;
use Process::MpiTiers;

$| = 1; #turn on autoflush.

my $usage = "
Usage:
	 maker_wq [options] <maker_opts> <maker_bopts> <maker_exe>
     
Maker Options:

     -genome|g <filename> Specify the genome file.
     
	 -est|E <filename>    Specify the EST file.
	 
     -estr|S <filename>   Specify the EST reads file.
     
	 -protein|P <filename> Specify the Protein file.
	 
	 -snaphmm|H <filename> Specify the Snap HMM file.

     -predictor|p <type>  Selects the predictor(s) to use when building
                          annotations.  Defines a pool of gene models for
                          annotation selection.
                          types: snap
                                 augustus
                                 fgenesh
                                 genemark
                                 est2genome (Uses EST's directly)
                                 protein2genome (For Prokaryotic annotation only)
                                 model_gff (Pass through GFF3 annotations)
                                 pred_gff (Uses passed through GFF3 predictions)

                          Use a ',' to seperate types (nospaces)
                          i.e. -predictor=snap,augustus,fgenesh

     -RM_off|R           Turns all repeat masking off.

     -datastore/         Forcably turn on/off MAKER's use of a two deep datastore
      nodatastore        directory structure for output.  By default this option
                         turns on whenever there are more the 1,000 contigs in
                         the input genome fasta file.

     -base    <string>   Set the base name MAKER uses to save output files.
                         MAKER uses the input genome file name by default.

     -retry|r <integer>  Rerun failed contigs up to the specified count.

     -cpus|c  <integer>  Tells how many cpus to use for BLAST analysis.

     -force|f            Forces maker to delete old files before running again.
                         This will require all blast analyses to be re-run.

     -again|a            Caculate all annotations and output files again even if
                         no settings have changed. Does not delete old analyses.

     -evaluate|e         Run Evaluator on final annotations (under development).

     -CTL                Generate empty control files in the current directory.

     -help|?             Prints this usage statement.

Work Queue Options

     -port <int>           Sets the port for work_queue to listen on (default: 9135)
 
     -fa   <int>           Sets the work_queue fast abort option with the given multiplier. 

     -N <project>          Sets the project name to <project>.

     -resources <int>      Specify the number of resources that will be provisioned (default: $resources). 
	 
     -tasks <int>          Sets the number of tasks to use for annotating the tiers (default: automatic). 
     
     -d <level>            Sets the debug flag for Work Queue. For all debugging output, try 'all'.
	 
     -bw <integer>         Sets the expected network bandwidth in MBytes/second.

     -reuse-tiers          Skip generation of tiers files and reuse the tier files present in current directory.
     
     -workerstowait <int>  Sets the number of tasks to use for annotating the tiers (default: automatic). 
     
     -workerequivalence    Assume the number of workers to be equivalent to the number of tasks (default: off). 
     
     -sample               Empirically estimate the model coefficients by sampling the execution environment. 
	 
     -samplesize <int>     Specify the number of sample partitions. (default = $sample_tasks) 
	 
     -estimate-gran <int>  Estimate runtimes with task sizes in increments of this value (default = 1).
     
     -show-estimates       Print the estimated runtimes for all possible task sizes for the given size of resources and exit.
	 
     -show-optimals        Print the optimal size of resources and tasks for operating on the inputs and exit.
     
     -schedulebydata       Use WQ scheduling option that schedules tasks based on the amount of required data a worker has.
     
     -tasktimes <file>     Record the individual task execution times in this file (default = off)
     
     -taskoverheads <file> Record the individual task execution times in this file (default = off)
";

#------------------------------------ MAIN -------------------------------------

#---Process options on the command line 
my %OPT;
try{
    GetOptions("RM_off|R" => \$OPT{R},
	       "force|f" => \$OPT{force},
	       "genome|g=s" => \$OPT{genome},
	       "est|E=s" => \$OPT{est},
	       "estr|S=s" => \$OPT{estr},
	       "protein|P=s" => \$OPT{protein},
	       "snaphmm|H=s" => \$OPT{snaphmm},
	       "cpus|c=i" => \$OPT{cpus},
	       "predictor=s" =>\$OPT{predictor},
	       "retry=i" =>\$OPT{retry},
	       "evaluate" =>\$OPT{evaluate},
	       "again|a" =>\$OPT{again},
	       "check" =>\$OPT{check},
	       "base=s" =>\$OPT{out_name},
	       "datastore!" =>\$OPT{datastore},
	       "CTL" => sub {GI::generate_control_files(); exit(0);},
	       "help|?" => sub {print $usage; exit(0)},
	       "port=i" => \$OPT{port},
	       "fa=i" => \$OPT{fast_abort},
	       "N=s" => \$OPT{project},
	       "d=s" => \$OPT{debug},
 	       "resources=i" => \$OPT{resources},
 	       "tasks=i" => \$OPT{tasks},
 	       "workerstowait=i" => \$OPT{workers_to_wait},
 	       "workerequivalence" => \$OPT{worker_equivalence},
 	       "bw=i" => \$OPT{bw},
 	       "show-estimates" => \$OPT{show_estimates},
 	       "show-optimals" => \$OPT{show_optimals},
 	       "reuse-tiers" => \$OPT{reuse_tiers},
 	       "sample" => \$OPT{sample},
 	       "samplesize=i" => \$OPT{sample_tasks},
 	       "estimate-gran=i" => \$OPT{estimate_granularity},
 	       "schedulebydata" => \$OPT{schedule_by_data},
 	       "tasktimes=s" => \$OPT{tasktimes_file},
 	       "taskoverheads=s" => \$OPT{taskoverheads_file}
	       );

} catch Error::Simple with{
    my $E = shift;
    print STDERR $E->{-text};
    die "\n\nMaker failed parsing command line options!\n" if();
};

if(!defined($OPT{"genome"})) {
	print "Please specify the genome file that you want to annotate and run again!\n";
	exit (0);
}

#global variables 
my %CTL_OPT;
my $DS_CTL;
my $GFF_DB;
my $build;
my $iterator;
my $wkdir = get_wkdir();
my $contigs_file = $OPT{genome};

try{
    #get arguments off the command line
    my @ctlfiles = @ARGV;
    if (not @ctlfiles) {
		if (-e "maker_opts.ctl" && -e "maker_bopts.ctl" && -e "maker_exe.ctl") {
			@ctlfiles = ("maker_opts.ctl", "maker_bopts.ctl", "maker_exe.ctl");
		} else {
			print STDERR "Maker control files not found\n";
			print STDERR $usage;
			exit(0);
		}
    }
    
    #--Control file processing
    #set up control options from control files
    %CTL_OPT = GI::load_control_files(\@ctlfiles, \%OPT, 1);
    
    #--open datastructure controller
    #This is where the output directory must be set
    $DS_CTL = ds_utility->new(\%CTL_OPT);
    
    #--set up gff database
    $GFF_DB = new GFFDB(\%CTL_OPT);
    $build = $GFF_DB->next_build;
    
    #---load genome multifasta/GFF3 file
    $iterator = new Iterator::Any( -fasta => $CTL_OPT{'genome'}, -gff => $CTL_OPT{'genome_gff'},);
} catch Error::Simple with{
    my $E = shift;
    print STDERR $E->{-text};
    my $code = 2;
    $code = $E->{-value} if (defined($E->{-value}));
    exit($code);
};

if(defined($OPT{"est"})) {
	set_est_maker_opts($OPT{"est"});
}

if(defined($OPT{"estr"})) {
	set_estr_maker_opts($OPT{"estr"});
}

if(defined($OPT{"protein"})) {
	set_protein_maker_opts($OPT{"protein"});
}

if(defined($OPT{"snaphmm"})) {
	set_snaphmm_maker_opts($OPT{"snaphmm"});
}

if(defined $OPT{"tasks"}){
	$tasks = $OPT{"tasks"}; 
}

if(defined($OPT{"bw"})) {
	$bandwidth_bytes_per_sec = $OPT{"bw"}*1000000;
}

if(defined($OPT{"sample_tasks"})) {
	$sample_tasks = $OPT{"sample_tasks"}; 
}

if(defined($OPT{"estimate_granularity"})) {
	$estimate_granularity= $OPT{"estimate_granularity"}; 
}

if(defined($OPT{"sample"})) {
	$sample_env = 1;
}

if(defined($OPT{"resources"})) {
	$resources = $OPT{"resources"}; 
}

my $datastore = $DS_CTL->{root}; 
if(!-e $datastore) {
	`mkdir $datastore`;
}

#Main loop here
main(); 

sub main {
	if(defined $OPT{"reuse_tiers"}){
		my $i = 0; 
		while (-e "$i\_todo.tier"){
			$i++;
		}
		$total_tiers = $i;
	} 
	
	if ($total_tiers <= 0) {
		$total_tiers = generate_tiers();
	}
	print time." :: Total number of tiers is $total_tiers \n";
	
	my $tiers_to_annotate = $total_tiers;
	
	my $start_tier = 0;
	my $tiers_annotated = 0;
	my $total_tiers_annotated = 0;

	my $partition_time_start;
	my $actual_partition_time = 0;

	#get the size of the software dependencies to transfer	
	$common_dependency_size = get_sw_depedency_size();
 
	if(defined $OPT{"show_optimals"}){
		if($tasks == 0)	 {
			print_global_optimal_runtimes();
		} else {
			my($optimal_runtime, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources) = get_optimal_runtimes_for_tasksize($tasks, 0, $total_tiers, 0);
			print "\n------------------------------------------------------------\n";
			print "Tasks Resources Runtime Partition Task Transfer\n";
			print "------------------------------------------------------------\n";

			print "$tasks $optimal_resources $optimal_runtime $optimal_partition_time $optimal_parallel_time $optimal_transfer_time\n";	
		}	
		exit(0);	
	}

	if(defined($OPT{"show_estimates"})) {
		for(my $i = 1; $i <= $tasks; $i++) {
			my($runtime, $partition_time, $parallel_time, $transfer_time) = estimate_runtime($i, $i, 0, $total_tiers);
			print "$i $runtime $partition_time $parallel_time $transfer_time\n";
		}	
		exit(0);	
	}

	###Begin WorkQueue section
	my $wq_start_time = time; 
	
	my $wq = setup_workqueue();
	if(defined $OPT{"workers_to_wait"}){
		work_queue::work_queue_activate_worker_waiting($wq, $OPT{"workers_to_wait"});
	}
	
	my $workers_used = 0;	
	if($sample_env) {
		$run_timing_code = 1;
		my $sample_size = ($total_tiers * 1)/100; #sample 1% of actual workload
		if($sample_size < 1) {
			$sample_size = 4;
		}
		print time." :: Sample size is $sample_size, sample tasks is $sample_tasks.\n";
		
		$partition_time_start = time;
		#submit tasks for sampling 
		$tiers_annotated = submit_annotation_tasks($wq, 0, $sample_size, $sample_tasks, $sample_tasks);
		$actual_partition_time += time - $partition_time_start;
	
		$workers_used += $sample_tasks;	 #we cached common dependencies at the used workers.
		$start_tier += $tiers_annotated;
		$total_tiers_annotated += $tiers_annotated;
		$tiers_to_annotate = $total_tiers - $tiers_annotated;
		
		my $total_task_execution_time = process_completed_tasks($wq, $sample_tasks, 5);	
		$per_byte_annotate_time = $total_task_execution_time/get_contigs_size(0, $sample_size);
		print time." :: Measured per byte annotation time is $per_byte_annotate_time.\n";
		$run_timing_code = 0;
	}

	my $optimal_tasks = $tasks;
	my $optimal_tasks_to_submit = $tasks;
	while($total_tiers_annotated < $total_tiers) {
		if($optimal_tasks == 0) {
			if(defined $OPT{"worker_equivalence"}){
				($optimal_tasks, $optimal_tasks_to_submit) = get_optimal_tasks($start_tier, $tiers_to_annotate, $workers_used, 1);
			} else {
				($optimal_tasks, $optimal_tasks_to_submit) = get_optimal_tasks($start_tier, $tiers_to_annotate, $workers_used, 0);
			}
		} else {
			if(!defined $OPT{"worker_equivalence"}){
				$optimal_tasks_to_submit = get_optimal_tasks_to_submit($tasks, $start_tier, $tiers_to_annotate, $workers_used);
			}
		}	
		print time." :: Optimal number of tasks for annotating $tiers_to_annotate tiers is $optimal_tasks in batches of $optimal_tasks_to_submit\n";
		
		$partition_time_start = time;
		$tiers_annotated = submit_annotation_tasks($wq, $start_tier, $tiers_to_annotate, $optimal_tasks, $optimal_tasks_to_submit);
		$actual_partition_time += time - $partition_time_start;
	
		if($workers_used < $optimal_tasks_to_submit) {
			$workers_used = $optimal_tasks_to_submit; #we cached common dependencies at the used workers.
		}	
		$start_tier += $tiers_annotated;
		$total_tiers_annotated += $tiers_annotated;
		$tiers_to_annotate = $total_tiers - $total_tiers_annotated;
		
		process_completed_tasks($wq, $optimal_tasks_to_submit, 5);	
	}

	remove_tier_files();
	delete_workqueue($wq);

	print "\n".time." :: Tiers annotated :: $total_tiers_annotated in total \n";

	my $wq_total_time = time - $wq_start_time;
	my $total_time = time - $start_time;
	print "Partition_time: $actual_partition_time\n";
	print "Transfer_time: $actual_transfer_time\n";
	print "WQ Total time: $wq_total_time\n";
	print "Total time: $total_time\n";
	
	exit(0);
}

#------------------------------- FUNCTION DEFINITIONS -------------------------------------
sub get_wkdir {
	my $wkdir = cwd();
	$wkdir .= "/";
	return $wkdir;
}

sub set_est_maker_opts {
	my($est) = @_;
	`perl -pi -e 's/^est:(.*)/est:$est/g;' maker_opts.ctl`;
	return 0;
}

sub set_estr_maker_opts {
	my($estr) = @_;
	`perl -pi -e 's/^est_reads:(.*)/est_reads:$estr/g;' maker_opts.ctl`;
	return 0;
}

sub set_protein_maker_opts {
	my($protein) = @_;
	`perl -pi -e 's/^protein:(.*)/protein:$protein/g;' maker_opts.ctl`;
	return 0;
}

sub set_snaphmm_maker_opts {
	my($snaphmm) = @_;
	`perl -pi -e 's/^snaphmm:(.*)/snaphmm:$snaphmm/g;' maker_opts.ctl`;
	return 0;
}

sub generate_tiers {
	# $iterator is implicitly global
	my $tier_ds;
	my $numTiers = 0;
	while (my $fasta = $iterator->nextFasta() ) {
		$tier_ds = Process::MpiTiers->new({fasta =>$fasta,
			CTL_OPT => \%CTL_OPT,
			DS_CTL  => $DS_CTL,
			GFF_DB  => $GFF_DB,
			build   => $build},
		   '0',
		   'Process::MpiChunk'
		   );
		nstore \$tier_ds, ($numTiers."_todo.tier");
		$numTiers++;
	}
	return $numTiers;
}

sub setup_workqueue {
	if(defined($OPT{"debug"})){
		work_queue::cctools_debug_flags_set($OPT{"debug"}); 
		print time." :: Work Queue debug flags set.\n";
	}

	my $port = "9155";
	if(defined($OPT{"port"})) {
		$port = $OPT{"port"}; 
	} 
	my $wq = work_queue::work_queue_create($port);
	if(defined($wq)) {
		print time." :: Work Queue listening on port $port.\n";
	} else {
		print STDERR "Failed to create Work Queue on port $port.\n"; 
		exit(0);
	}
	if(defined($OPT{"fast_abort"})) {
		my $multiplier = $OPT{"fast_abort"}; 
		my $fa = work_queue::work_queue_activate_fast_abort($wq, $multiplier); 
		print time." :: Work Queue fast abort set to $multiplier.\n";
	}
	if(defined($OPT{"project"})) {
		work_queue::work_queue_specify_name($wq, $OPT{"project"});
		work_queue::work_queue_specify_master_mode($wq, 1);
		print time." :: Work Queue project name set to $OPT{\"project\"}.\n";
	}
	
	if(defined($OPT{"schedule_by_data"})) {
		work_queue::work_queue_specify_algorithm($wq, $WORK_QUEUE_SCHEDULE_FILES);
	}
	
	work_queue::work_queue_specify_log($wq, "maker_wq.stats");

	return $wq;
}

sub submit_annotation_tasks {
	my($wq, $start_tier, $num_tiers, $total_tasks, $tasks_to_submit) = @_;
	
	my $tiers_remaining = $num_tiers;
	my $tasks_remaining = $total_tasks;
	my $tiers_per_task;

	if($tasks_to_submit > $total_tasks) {
		return 0;
	}

	while(($total_tasks-$tasks_remaining) < $tasks_to_submit) {
		if($start_tier >= $total_tiers) {
		    last;
		}
		
		if($tiers_remaining % $tasks_remaining == 0) {
			$tiers_per_task = $tiers_remaining / $tasks_remaining;
		} else {
			$tiers_per_task = ceil($tiers_remaining / $tasks_remaining);
		}
	
		if ($start_tier + $tiers_per_task > $total_tiers) {
			$tiers_per_task = $total_tiers - $start_tier;
		}	
		print time." :: Chosen tiers per task is $tiers_per_task.\n";
		
		submit_task($wq, $start_tier, $tiers_per_task);
		
		$tasks_remaining--;	
		$tiers_remaining -= $tiers_per_task;
		$start_tier += $tiers_per_task;	
	}
	
	#return the number of tiers that were submitted for annotation.
	return ($num_tiers-$tiers_remaining);
}

sub submit_task {
	my($wq, $start_tier, $tiers_in_task) = @_;
	if($tiers_in_task < 1) {
		print STDERR "Invalid query size. Should be at least 1.\n"; 
		exit(0);
	}
	
	my $task_command .= "find -name \"*.tar\" -exec tar -x -f {} \\\;
	                     ./maker_wq_worker";
	
	my $query_seqs = ""; 
	for(my $tier_num = $start_tier; $tier_num < $start_tier+$tiers_in_task; $tier_num++) {
		$query_seqs .= "$tier_num "; 
	}
	
	print time." :: Creating WQ task for query sequence(s) $query_seqs\n";  
	my $task = work_queue::work_queue_task_create("$task_command $query_seqs"); 
	my $task_tag = "$start_tier" . "-" . ($start_tier+$tiers_in_task-1);
	print time." :: Assigning tag $task_tag to task created for query sequence(s) $query_seqs\n";  
	work_queue::work_queue_task_specify_tag($task, $task_tag); 

	submit_env_files($task);
	submit_input_base_files($task, $start_tier);
	
	for(my $tier_num = $start_tier; $tier_num < ($start_tier+$tiers_in_task); $tier_num++){
		submit_input_tier_files($task, $tier_num);
		configure_remote_tier_annotation($tier_num);	
		specify_output_tier_files($task, $tier_num);
	}	
	
	work_queue::work_queue_submit($wq, $task);
	print time." :: Submitted task with command: $task_command for query seq: $query_seqs\n";

	return 1;
}

sub submit_env_files{
	my ($task) = @_;
	work_queue::work_queue_task_specify_file($task, "$FindBin::Bin/maker_wq_worker", "maker_wq_worker", 0, 1);
	
	#specify the MAKER library files 
	my $lib = "$FindBin::Bin";
	$lib =~ s/bin/lib/; 
	if(! -e "$wkdir/lib.tar") {
		`tar -C $lib/.. -cf $wkdir/lib.tar lib/`;	
		`tar -C $wkdir/perl_libs_install -rf $wkdir/lib.tar lib/`;	
	}
	work_queue::work_queue_task_specify_file($task, "lib.tar", "lib.tar", 0, 1);
}

sub submit_input_base_files {
	my ($task, $tier) = @_;
	
	my $tierFile = $tier."_todo.tier";
	my $tier_ds = ${retrieve($tierFile)}; #$tier_ds holds all the information for task 
	
	submit_edb_input_files($task, \$tier_ds);
	submit_pdb_input_files($task, \$tier_ds);	
	submit_ddb_input_files($task, \$tier_ds);	
	submit_rdb_input_files($task, \$tier_ds);	
	submit_adb_input_files($task, \$tier_ds);	
	submit_input_files($task, \$tier_ds);	
	submit_executable_files($task, \$tier_ds);	
	nstore \$tier_ds, ($tierFile);
}

sub submit_input_tier_files {
	my ($task, $tier) = @_;
	my $tierFile = $tier."_todo.tier";
	work_queue::work_queue_task_specify_file($task, $wkdir.$tierFile, $tierFile, 0, 0);
}

sub submit_edb_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference
	if (defined $tier_ds->CTL_OPT->{_e_db}){
		my @ests = @{$tier_ds->CTL_OPT->{_e_db}};
		for(my $j = 0; $j < scalar(@ests); $j++){
			my $file = $ests[$j]; 
			my @fields = split(/\//, $file);
			if ($#fields > 1){
				$file = abs_path($file); 
			}
			@fields = split(/\//, $file);
			my $newfile = $fields[scalar(@fields) - 1];
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1);
			if ($#fields > 1) {
				$ests[$j] = $newfile;  
			}
		}
		$tier_ds->CTL_OPT->{_e_db} = \@ests;
	}
}

sub submit_pdb_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference
	if (defined $tier_ds->CTL_OPT->{_p_db}){ 
		my @proteins = @{$tier_ds->CTL_OPT->{_p_db}}; 	
		for(my $j = 0; $j < scalar(@proteins); $j++){
			my $file = $proteins[$j];
			my @fields = split(/\//, $file);
			if ($#fields > 1){
				$file = abs_path($file); 
			}
			@fields = split(/\//, $file); 
			my $newfile = $fields[scalar(@fields) - 1]; 
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1); 
			if ($#fields > 1){
				$proteins[$j] = $newfile; 
			}
		}
		$tier_ds->CTL_OPT->{_p_db} = \@proteins; 
	}	
}

sub submit_ddb_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference
	if (defined $tier_ds->CTL_OPT->{_d_db}){
		my @d = @{$tier_ds->CTL_OPT->{_d_db}}; 	
		for(my $j = 0; $j < scalar(@d); $j++){
			my $file = $d[$j]; 
			my @fields = split(/\//, $file);
			if ($#fields > 1){
				$file = abs_path($file); 
			}
			@fields = split(/\//, $file); 
			my $newfile = $fields[scalar(@fields) - 1];
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1); 
			if ($#fields > 1){
				$d[$j] = $newfile; 
			}
		}
		$tier_ds->CTL_OPT->{_d_db} = \@d; 
	}		
}

sub submit_rdb_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference
	if (defined $tier_ds->CTL_OPT->{_r_db}){
		my @r = @{$tier_ds->CTL_OPT->{_r_db}}; 	
		for(my $j = 0; $j < scalar(@r); $j++){
			my $file = $r[$j]; 
			my @fields = split(/\//, $file);
			if ($#fields > 1){
				$file = abs_path($file); 
			}
			@fields = split(/\//, $file); 
			my $newfile = $fields[scalar(@fields) - 1]; 
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1); 
			if ($#fields > 1){
				$r[$j] = $newfile; 
			}
		}
		$tier_ds->CTL_OPT->{_r_db} = \@r; 
	}
}

sub submit_adb_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference 
	if (defined $tier_ds->CTL_OPT->{_a_db}){
		my @a = @{$tier_ds->CTL_OPT->{_a_db}}; 	
		for(my $j = 0; $j < scalar(@a); $j++){
			my $file = $a[$j];
			my @fields = split(/\//, $file);
			if ($#fields > 1){
				$file = abs_path($file); 
			}
			@fields = split(/\//, $file); 
			my $newfile = $fields[scalar(@fields) - 1]; 
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1); 
			
			if ($#fields > 1){
				$a[$j] = $newfile; 
			}
		}
		$tier_ds->CTL_OPT->{_a_db} = \@a; 
	}
}

sub submit_input_files {
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference 
	my @inputs = ("_est", "_altest", "_repeat_protein", "_protein", "_est_reads", "protein", "repeat_protein", "genome", "est", "est_reads", "altest" ); 
	foreach my $input (@inputs){
		if (! defined $tier_ds->CTL_OPT->{$input}){next;}
		my $file = $tier_ds->CTL_OPT->{$input}; 
		my @fields = split(/\//, $file); 
		my $newfile = $fields[scalar(@fields) - 1]; 
		if(-e $file){
			$file = abs_path($file); 
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1); 
		}
		$tier_ds->CTL_OPT->{$input} = $newfile; 
	}
}

sub submit_executable_files {	
	my($task, $tier_ds) = @_;
	$tier_ds = $$tier_ds; #dereference $tier_ds since it is passed by reference 
	my @files = ('snaphmm',  'SEEN_file', 'rmlib');
	foreach my $x (@files){ 
		my $file = $tier_ds->CTL_OPT->{$x}; 
		my @fields = split(/\//, $file); 
		my $newfile = $fields[scalar(@fields) - 1]; 
		if(-e $file){
			$file = abs_path($file); 
			work_queue::work_queue_task_specify_file($task, $file, "$newfile", 0, 1);
			$tier_ds->CTL_OPT->{$x} = "./$newfile"; 
		}

	}	 
	
	my @execs = ('formatdb', 'blastall', '_formater', '_tblastx', 'tblastx', 'blastx', 'xdformat', 'exonerate', 'snap', 'RepeatMasker', 'blastn', 'formatdb', 'gmhmme3', '_blastx', '_blastn', 'probuild', 'augustus', 'gmhmme3', 'gmhmmp', 'fgenesh', 'twinscan');
	foreach my $v (@execs){
		my $file = $tier_ds->CTL_OPT->{$v}; 
		if (! -e $file){
			next;
		}
		$file = abs_path($file); 
		my @fields = split(/\//, $file); 
		my $prefix = ""; 
		for (my $j = 0; $j < scalar(@fields) - 1; $j++) {
			$prefix .= "/".$fields[$j];
		}
		my $newfile = $fields[scalar(@fields) - 1]; 
		my $folder = $fields[scalar(@fields) - 2]; 
		if(-e $file){
			if (! -e "$v.tar"){
				`tar -C $prefix/.. -cf $wkdir/$v.tar $folder`; 
			}
			work_queue::work_queue_task_specify_file($task, "$v.tar", "$v.tar", 0, 1);
			$tier_ds->CTL_OPT->{$v} = "$folder/$newfile"; 
		}
	}
}

sub configure_remote_tier_annotation{
	my($tier) = @_;
	my $tierFile = $tier."_todo.tier";
	my $tier_ds = ${retrieve($tierFile)};
	$tier_ds->CTL_OPT->{out_name} = "."; 
	$tier_ds->CTL_OPT->{out_base} = "."; 
	$tier_ds->CTL_OPT->{the_void} = ".";
	my $file = $tier_ds->DS_CTL->{log}; 
	my @fields = split(/\//, $file);
	$file = $fields[scalar(@fields) - 1]; 
	$tier_ds->DS_CTL->{log} = "./$file"; 
	my $root = $tier_ds->DS_CTL->{root}; 
	$tier_ds->DS_CTL->{root} = "./"; 
	$tier_ds->DS_CTL->{ds_object}->{_root} = "./"; 
	$tier_ds->{the_void} = "."; 
	$tier_ds->CTL_OPT->{CWD} = ".";  
	$tier_ds->GFF_DB->{dbfile} = "./";
	$tier_ds->CTL_OPT->{_TMP} = "./";  
	
	nstore \$tier_ds, ($tierFile); #store the modified variables to the tier file that is transmitted to workers	
}

sub specify_output_tier_files {
	my ($task, $tier) = @_;
	
	my $tierFile = $tier."_todo.tier";
	my $tier_ds = ${retrieve($tierFile)}; #$tier_ds holds all the information for task 
	if(!exists($tier_ds->{VARS}->{fasta})){
		print STDERR "Fasta doesn't exist\n"; 
		exit(0);
	}
	#need to know the remote directory name, this is generated from the sequence header
	my $fasta = Fasta::ucFasta(\$tier_ds->{VARS}->{fasta}); #build uppercase fasta
	my $q_def = Fasta::getDef(\$fasta); #Get fasta header
	my $seq_id = Fasta::def2SeqID($q_def); #Get sequence identifier
	my $root = $tier_ds->DS_CTL->{root}; 
	my $newfile = $root."/$seq_id";
	my $ds_flag  = (exists($tier_ds->CTL_OPT->{datastore})) ? $tier_ds->CTL_OPT->{datastore} : 1;
	if ($ds_flag) {
		use Digest::MD5 qw(md5_hex);

		my $dir = ""; 
		my($digest) = uc md5_hex($seq_id); #the hex string, uppercased
		for(my $j = 0; $j < 2; $j++) {
			$dir .= substr($digest, $j*2, 2) ."/";
		}
		$dir .= $seq_id . "/";
		work_queue::work_queue_task_specify_file($task, "$datastore/$dir", $dir, 1, 0); 
	} else {
		work_queue::work_queue_task_specify_file($task, "$datastore/$seq_id", $seq_id, 1, 0); 
	}
}

sub delete_workqueue {
	my($wq) = @_;
	work_queue::work_queue_delete($wq);
}

sub remove_tier_files {
	unlink "*.tier";
}

sub process_completed_tasks {
	my($wq, $tasks_to_retrieve, $timeout) = @_;

	my $task_execution_times = 0;
	my $total_transfered_bytes= 0;
	my $total_transfer_time = 0;

	#somewhere MAKER launches "maintain.pl" which becomes a zombie script, it needs to be reaped before WQ wait. 
	Proc::Signal::reap_children_by_name(9, 'maintain.pl');

	my $tasktimes_fh;
	if(defined($OPT{"tasktimes_file"})) {
		my $tasktimes_file = $OPT{"tasktimes_file"}; 
		open $tasktimes_fh, ">>$tasktimes_file"; 
	}

	my $taskoverheads_fh;
	if(defined($OPT{"taskoverheads_file"})) {
		my $taskoverheads_file = $OPT{"taskoverheads_file"}; 
		open $taskoverheads_fh, ">>$taskoverheads_file"; 
	}	

	my $retrieved_tasks = 0;
	while ($retrieved_tasks < $tasks_to_retrieve) {
		my $t = work_queue::work_queue_wait($wq, $timeout); 
		if(defined($t)) {
			$retrieved_tasks++;
			my $tasktag = $t->{tag}; 

			$total_transfer_time += $t->{total_transfer_time};
			$total_transfered_bytes += $t->{total_bytes_transferred};
			$task_execution_times += $t->{cmd_execution_time}/1000000;
			
			if(defined($OPT{"tasktimes_file"})) {
				my $taskid = $t->{taskid};
				my $cmd_execution_time = $t->{cmd_execution_time};
				print $tasktimes_fh "$taskid $cmd_execution_time\n";	
			}
			
			if(defined($OPT{"taskoverheads_file"})) {
				my $taskid = $t->{taskid};
				my $input_start = $t->{time_send_input_start};
				my $input_end = $t->{time_send_input_finish};
				my $exec_start = $t->{time_execute_cmd_start};
				my $exec_end = $t->{time_execute_cmd_finish};
				my $result_start = $t->{time_receive_result_start};
				my $result_end = $t->{time_receive_result_finish};
				my $output_start = $t->{time_receive_output_start};
				my $output_end = $t->{time_receive_output_finish};
				print $taskoverheads_fh "$taskid $input_start $input_end $exec_start $exec_end $result_start $result_end $output_start $output_end\n";	
			}
			
			#Check if return status indicates failure
			my $output = $t->{output}; 
			my $retStatus = index($output, "EXIT:");
			if ($retStatus != -1) {
				$retStatus = substr($output, $retStatus+5, 2);
				$retStatus = sprintf("%d", $retStatus);
			}
			if($retStatus == 0 || $retStatus == 1) {
				print time." :: Finished WQ task for tiers $tasktag.\n";
				work_queue::work_queue_task_delete($t);
			} else { #tier resubmission on failure 
				$task_failures{$tasktag} += 1; 
				if($task_failures{$tasktag} <= 3){
					print time." :: Failed, resubmitting WQ task for tiers $tasktag\n";
					work_queue::work_queue_submit($wq, $t);
				} else{
					print time." :: WQ task for tiers $tasktag has failed too many times\n"; 
					work_queue::work_queue_task_delete($t);
				}
			}
		} 
	}	
	
	if($run_timing_code == 1) {
		$bandwidth_bytes_per_sec = $total_transfered_bytes / ($total_transfer_time / 1000000);
		print time." :: Measured bandwidth is $bandwidth_bytes_per_sec.\n";
	}
	
	$actual_transfer_time += $total_transfer_time;

	if(defined($OPT{"tasktimes_file"})) {
		close $tasktimes_fh;
	}	
	if(defined($OPT{"taskoverheads_file"})) {
		close $taskoverheads_fh;
	}	
	
	return $task_execution_times;
}

sub get_sw_depedency_size {
	my $tier = 0; #all tiers have the same sw dependency, so just use tier 0.
	my $tierFile = $tier."_todo.tier";
	my $tier_ds = ${retrieve($tierFile)}; #$tier_ds holds all the information for task 

	my $sw_dependency_size = 0;
	
	$sw_dependency_size += -s "$FindBin::Bin/maker_wq_worker";
	
	my $lib = "$FindBin::Bin";
	$lib =~ s/bin/lib/; 
	if(! -e "$wkdir/lib.tar") {
		`tar -C $lib/.. -cf $wkdir/lib.tar lib/`;	
		`tar -C $wkdir/perl_libs_install -rf $wkdir/lib.tar lib/`;	
	}
	my $lib_size = -s "$wkdir/lib.tar";  
	$sw_dependency_size += $lib_size;

	if (defined $tier_ds->CTL_OPT->{_e_db}){
		my $edb_size = 0;	
		my @ests = @{$tier_ds->CTL_OPT->{_e_db}};
		for(my $j = 0; $j < scalar(@ests); $j++){
			my $file = $ests[$j]; 
			$edb_size += -s $file;	
		}	
		$sw_dependency_size += $edb_size;
	}

	if (defined $tier_ds->CTL_OPT->{_p_db}){ 
		my @proteins = @{$tier_ds->CTL_OPT->{_p_db}}; 	
		my $pdb_size = 0;	
		for(my $j = 0; $j < scalar(@proteins); $j++){
			my $file = $proteins[$j]; 
			$pdb_size += -s $file;	
		}
		$sw_dependency_size += $pdb_size;
	}	
	
	if (defined $tier_ds->CTL_OPT->{_d_db}){
		my @d = @{$tier_ds->CTL_OPT->{_d_db}}; 	
		my $ddb_size = 0;	
		for(my $j = 0; $j < scalar(@d); $j++){
			my $file = $d[$j]; 
			$ddb_size += -s $file;	
		}
		$sw_dependency_size += $ddb_size;
	}

	if (defined $tier_ds->CTL_OPT->{_r_db}){
		my @r = @{$tier_ds->CTL_OPT->{_r_db}}; 	
		my $rdb_size = 0;	
		for(my $j = 0; $j < scalar(@r); $j++){
			my $file = $r[$j]; 
			$rdb_size += -s $file;	
		}
		$sw_dependency_size += $rdb_size;
	}
	
	if (defined $tier_ds->CTL_OPT->{_a_db}){
		my @a = @{$tier_ds->CTL_OPT->{_a_db}}; 	
		my $adb_size = 0;	
		for(my $j = 0; $j < scalar(@a); $j++){
			my $file = $a[$j];
			$adb_size += -s $file;	
		}
		$sw_dependency_size += $adb_size;
	}

	my @inputs = ("_est", "_altest", "_repeat_protein", "_protein", "_est_reads", "protein", "repeat_protein", "genome", "est", "est_reads", "altest", 'snaphmm',  'SEEN_file', 'rmlib'); 
	my $extern_input_size = 0;	
	foreach my $input (@inputs){
		if (! defined $tier_ds->CTL_OPT->{$input}){next;}
		my $file = $tier_ds->CTL_OPT->{$input}; 
		if(-e $file){
			$file = abs_path($file); 
			$sw_dependency_size += -s $file;
		}
	}
	
	my @execs = ('formatdb', 'blastall', '_formater', '_tblastx', 'tblastx', 'blastx', 'xdformat', 'exonerate', 'snap', 'RepeatMasker', 'blastn', 'formatdb', 'gmhmme3', '_blastx', '_blastn', 'probuild', 'augustus', 'gmhmme3', 'gmhmmp', 'fgenesh', 'twinscan');
	my $extern_exec_size = 0;	
	foreach my $v (@execs){
		my $file = $tier_ds->CTL_OPT->{$v}; 
		if (! -e $file){ next; }
		$file = abs_path($file); 
		my @fields = split(/\//, $file); 
		my $prefix = ""; 
		for (my $j = 0; $j < scalar(@fields) - 1; $j++) {
			$prefix .= "/".$fields[$j];
		}
		my $folder = $fields[scalar(@fields) - 2]; 
		if(-e $file){
			if (! -e "$v.tar"){
				`tar -C $prefix/.. -cf $wkdir/$v.tar $folder`; 
			}
			$sw_dependency_size += -s "$v.tar";
		}
	}
 	
	return $sw_dependency_size;
}

sub get_contigs_size {
	my($start_tier, $num_tiers) = @_;
	my $contigs_size = 0; 
	for (my $i = $start_tier; $i < ($start_tier + $num_tiers); $i++) {
		$contigs_size += -s "$i\_todo.tier";
	}
	return $contigs_size;
}

sub estimate_runtime {
	my($resources, $resources_used, $tasks, $start_tier, $num_tiers) = @_; 
	
	my $optimal_time = -1;

	my $data_common = $common_dependency_size; 
	
	my $data_unique = get_contigs_size($start_tier, $num_tiers); 
	my $contigs_size = $data_unique;
	
	#Model:
	#T(n,k,r) = [T_part + T_merge] + [(t*n)/k * ceil(k/r)] + [(total_data_unique + (data_common * r))/BW_Bps]. 
	#T_merge is trivial since we just put each task output in a directory and say done.

	my $partition_time = ($partition_overhead_coeff_a * $tasks) + ($partition_overhead_coeff_b * $num_tiers);
	my $total_workload_time = ($contigs_size * $per_byte_annotate_time); 
	my $parallel_time = ($total_workload_time / $tasks) * ceil($tasks/$resources);
	
	my $new_resources;	
	my $resources_to_consider = $resources;
	if($resources > $tasks) { 
		$resources_to_consider = $tasks;	
	}	
	if($resources_to_consider <= $resources_used) {
		$new_resources = 0;
	} else {
		$new_resources = $resources_to_consider - $resources_used;
	}
	my $transfer_time = ((2*$data_unique) + ($data_common * $new_resources)) / $bandwidth_bytes_per_sec; 

	my $total_execution_time = $partition_time + $parallel_time + $transfer_time;

	return ($total_execution_time, $partition_time, $parallel_time, $transfer_time);
}

sub get_optimal_runtimes_for_tasksize {
	my($tasks, $start_tier, $num_tiers, $resources_used) = @_; 
	
	my $optimal_time = -1;
	my $optimal_parallel_time = 0; 
	my $optimal_partition_time = 0; 
	my $optimal_transfer_time = 0; 
	
	my $optimal_resources;

	for (my $resources = 1; $resources <= $tasks; $resources++) {
		my($total_time, $partition_time, $parallel_time, $transfer_time) = estimate_runtime($resources, $resources_used, $tasks, $start_tier, $num_tiers);
		print "Resources $resources, used resources $resources_used, tasks $tasks: $total_time, $partition_time, $parallel_time, $transfer_time\n";
		if ($optimal_time < 0 || ($total_time < $optimal_time)) {
			$optimal_time = $total_time;
			$optimal_partition_time = $partition_time;
			$optimal_parallel_time = $parallel_time;
			$optimal_transfer_time = $transfer_time;
			$optimal_resources = $resources; 
		} 	
	} 	
	
	#print "Total transfer time is $transfer_overhead and optimal task size is $optimal_tasks\n";		
	return ($optimal_time, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources);
}

sub get_optimal_tasks {
	my($start_tier, $num_tiers, $workers_used, $equal_resources) = @_; 
	
	my $global_optimal_time = -1;
	my $global_optimal_partition_time;
	my $global_optimal_parallel_time;
	my $global_optimal_transfer_time;
	my $global_optimal_tasks;
	my $global_optimal_resources;

	my $optimal_runtime;
	my $optimal_partition_time;
	my $optimal_parallel_time;
	my $optimal_transfer_time;
	my $optimal_resources;
	
	my $tasks = 1;	
	while ($tasks <= $num_tiers) { 
		if ($equal_resources == 1) {
			($optimal_runtime, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources) = estimate_runtime($tasks, $workers_used, $tasks, $start_tier, $num_tiers);
			$optimal_resources = $tasks;	
		} else {	
			($optimal_runtime, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources) = get_optimal_runtimes_for_tasksize($tasks, $start_tier, $num_tiers, $workers_used);
		}	
		if ($global_optimal_time < 0 || ($optimal_runtime < $global_optimal_time)) {
			$global_optimal_time = $optimal_runtime;
			$global_optimal_partition_time = $optimal_partition_time;
			$global_optimal_parallel_time = $optimal_parallel_time;
			$global_optimal_transfer_time = $optimal_transfer_time;
			$global_optimal_tasks = $tasks;
			$global_optimal_resources = $optimal_resources;
		}
		
		if($tasks == 1 && $estimate_granularity > 1) {
			$tasks += $estimate_granularity-1;
		} else {
			$tasks += $estimate_granularity;
		}
	}

	return ($global_optimal_tasks, $global_optimal_resources);
	#return ($global_optimal_tasks, $global_optimal_resources, $global_optimal_time, $global_optimal_partition_time, $global_optimal_parallel_time, $global_optimal_transfer_time);
}

sub get_optimal_tasks_to_submit {
	my($tasks, $start_tier, $num_tiers, $workers_used) = @_; 
	
	my ($optimal_runtime, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources) = get_optimal_runtimes_for_tasksize($tasks, $start_tier, $num_tiers, $workers_used);
	return ($optimal_resources);
}


sub print_global_optimal_runtimes {
	my $global_optimal_time = -1;
	my $global_optimal_partition_time;
	my $global_optimal_parallel_time;
	my $global_optimal_transfer_time;
	my $global_optimal_tasks;
	my $global_optimal_resources;
	
	print "\n------------------------------------------------------------\n";
	print "Tasks Resources Runtime Partition Task Transfer\n";
	print "------------------------------------------------------------\n";

	my $tasks = 1;	
	while ($tasks <= $total_tiers) { 
		my($optimal_runtime, $optimal_partition_time, $optimal_parallel_time, $optimal_transfer_time, $optimal_resources) = get_optimal_runtimes_for_tasksize($tasks, 0, $total_tiers, 0);
		if ($global_optimal_time < 0 || ($optimal_runtime < $global_optimal_time)) {
			$global_optimal_time = $optimal_runtime;
			$global_optimal_partition_time = $optimal_partition_time;
			$global_optimal_parallel_time = $optimal_parallel_time;
			$global_optimal_transfer_time = $optimal_transfer_time;
			$global_optimal_tasks = $tasks;
			$global_optimal_resources = $optimal_resources;
		}
		print "$tasks $optimal_resources $optimal_runtime $optimal_partition_time $optimal_parallel_time $optimal_transfer_time\n";	
		
		if($tasks == 1 && $estimate_granularity > 1) {
			$tasks += $estimate_granularity-1;
		} else {
			$tasks += $estimate_granularity;
		}
	}
	
	print "------------------------------------------------------------\n";
	print "\n--> Please allocate $global_optimal_resources resources that will lead to the lower run time of $global_optimal_time s using $global_optimal_tasks tasks.\n";		
}
